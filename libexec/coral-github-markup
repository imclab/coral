#!/usr/bin/env ruby
# Usage: coral github-markup <file>
# Summary: Render HTML markup from a file
# Help: Renders markup from Markdown, Textile, RDoc, and other types of files
# the same way it is done on GitHub.com.

file = ARGV[0]

unless file and File.exist? file
  warn "usage: #$0 <file>"
  exit 2
end

begin
  require 'github/markup'
rescue LoadError
  if defined?(::Gem)
    abort $!.message
  else
    require 'rubygems'
    retry
  end
end

renderer = nil
html_options = { }
markdown_options = {
  :autolink           => true,
  :no_intra_emphasis  => true,
  :fenced_code_blocks => true,
}

html_renderer = lambda {
  renderer ||= begin
    class TocHTML < Redcarpet::Render::HTML
      def header text, level
        href = text.gsub(/<.+?>/, '').strip.gsub(/\s+/, '-').downcase
        anchor = %(<a name="#{href}" href="\##{href}"></a>)
        %(<h#{level}>#{anchor}#{text}</h#{level}>\n)
      end
    end

    begin
      old_level, $-w = $-w, nil
      require 'pygments'
    rescue LoadError
      warn "error loading pygments.rb; no syntax highlighting available"
      TocHTML
    else
      require 'cgi'
      Class.new(TocHTML) do
        def block_code(code, language)
          if language
            Pygments.highlight code,
              :lexer => language,
              :options => {:encoding => 'utf-8'}
          else
            # can't call super: https://github.com/tanoku/redcarpet/issues/51
            "<pre><code>#{CGI.escapeHTML code}</code></pre>"
          end
        end
      end
    ensure
      $-w = old_level
    end
  end
}

GitHub::Markup.markup(:redcarpet, /md|mkdn?|mdown|markdown/) do |content|
  markdown = Redcarpet::Markdown.new \
    html_renderer.call.new(html_options),
    markdown_options

  markdown.render(content)
end

puts GitHub::Markup.render(file)
