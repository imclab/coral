#!/usr/bin/ruby
# Usage: coral sort-versions
# Summary: Sort version numbers
# Help: Sorts version numbers passed on separate lines on STDIN. Results are
# printed from largest number to smallest.
#
# Values that are not numbers are sorted by their alphabetical order.

require 'strscan'

# Adapted from Jordi Bunster
# https://github.com/jordi/version_sorter/blob/master/version_sorter.rb
sort = lambda do |list|
  ss     = StringScanner.new ''
  pad_to = 0
  list.each { |li| pad_to = li.size if li.size > pad_to }

  list.sort_by do |li|
    ss.string = li
    parts     = ''

    if match = ss.scan_until(/[^.+-]+/)
      alpha = match.index(/[^.+\d-]/)
      part  = match.send(alpha ? :ljust : :rjust, pad_to)
      part.sub!(/^(\s+)(\W)/, '\2\1') # put separator to front
      part.sub!(/^\+/, '.') # make "+" sort with higher precedence than "-"
      parts << part
    end until ss.eos?

    # make final versions sort with higher precendence than pre-releases
    parts << "."

    parts
  end
end

versions = STDIN.readlines.map {|v| v.chomp }

if versions.size > 1
  sorted = sort.call versions
  sorted.reverse!
else
  sorted = versions
end

puts sorted
